"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Actor = function Actor(name, age) {
  _classCallCheck(this, Actor);

  this.name = name;
  this.age = age;
};

var arnold = new Actor('Arnold Schwarzenegger', 71);
var actors = [new Actor('Edward Furlong', 41), new Actor('Robert Patrick', 60), new Actor('Linda Hamilton', 62)];
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var EventEmitter =
/*#__PURE__*/
function () {
  function EventEmitter() {
    _classCallCheck(this, EventEmitter);

    this.events = {};
  }

  _createClass(EventEmitter, [{
    key: "on",
    value: function on(eventName, callback) {
      if (!this.events[eventName]) {
        this.events[eventName] = [];
      }

      this.events[eventName].push(callback);
    }
  }, {
    key: "emit",
    value: function emit(eventName) {
      var event = this.events[eventName];

      if (event) {
        event.forEach(function (fn) {
          fn.call(null);
        });
      }
    }
  }, {
    key: "off",
    value: function off(eventName, listener) {
      var listeners = this.events[eventName];

      if (listeners) {
        for (var i = listeners.length; i > 0; i--) {
          if (listeners[i] == listener) {
            listeners.splice(i, 1);
            break;
          }
        }
      }
    }
  }]);

  return EventEmitter;
}();

var _default = EventEmitter; // Mixins
// let social = {
//     share(friendName) {
//         console.log(`${friendName} share ${this.title}`);
//     },
//     like(friendName) {
//         console.log(`${friendName} likes ${this.title}`);
//     }
// }
// Object.assign(Movie.prototype, social);
// const ironman = new Movie('Iron-man', '2005', 115, []);
// // ironman.share('Mike Blossom');
// export default {mov1, mov2, mov3};

exports["default"] = _default;
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Logger =
/*#__PURE__*/
function () {
  function Logger() {
    var _this = this;

    _classCallCheck(this, Logger);

    evEmitter.on('play', function () {
      _this.log('play event is playing..');
    });
  }

  _createClass(Logger, [{
    key: "log",
    value: function log(info) {
      console.log(info);
    }
  }]);

  return Logger;
}();

var log = new Logger();
"use strict";

var _eventEmitter = _interopRequireDefault(require("./eventEmitter"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Movie =
/*#__PURE__*/
function (_EventEmitter) {
  _inherits(Movie, _EventEmitter);

  function Movie(title, year, duration, cast) {
    var _this;

    _classCallCheck(this, Movie);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Movie).call(this));
    _this.title = title;
    _this.year = year;
    _this.duration = duration;
    _this.cast = cast;
    return _this;
  }

  _createClass(Movie, [{
    key: "play",
    value: function play() {
      this.emit('play');
    }
  }, {
    key: "pause",
    value: function pause() {
      this.emit('pause');
    }
  }, {
    key: "resume",
    value: function resume() {
      this.emit('resume');
    }
  }, {
    key: "getInfo",
    value: function getInfo() {
      console.log("".concat(this.title, " was released in ").concat(this.year, " and lasts ").concat(this.duration, " minutes."));
    }
  }, {
    key: "addCast",
    value: function addCast(cast) {
      if (cast.length == undefined) this.cast.push(cast);else {
        for (var i = 0; i < cast.length; i++) {
          this.cast.push(cast[i]);
        }
      }
    }
  }]);

  return Movie;
}(_eventEmitter["default"]);

var mov1 = new Movie('Terminator2', '1991', 137, []);
var mov2 = new Movie('Troya', '2004', 163);
var mov3 = new Movie('Batman: the dark night', '2008', 152);
mov1.on('play', function () {
  console.log("The 'play' event has been emitted");
});
